{
  "enabled": true,
  "name": "Code Quality Analyzer",
  "description": "Monitors Python source files for changes and provides code quality analysis including code smells, design patterns, best practices, readability, maintainability, and performance optimization suggestions while preserving functionality.",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "*.py",
      "config.py",
      "game_state.py",
      "input_handler.py",
      "main.py",
      "map_environment.py",
      "menu.py",
      "physics.py",
      "player.py",
      "targets.py",
      "utils.py",
      "wall_running.py",
      "weapons.py"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "A Python source file has been modified. Please analyze the changed code for potential improvements focusing on:\n\n1. **Code Smells**: Identify any code smells like long methods, large classes, duplicate code, or complex conditionals\n2. **Design Patterns**: Suggest appropriate design patterns that could improve the code structure\n3. **Best Practices**: Check for Python best practices including PEP 8 compliance, proper naming conventions, and documentation\n4. **Readability**: Suggest improvements for code clarity and understandability\n5. **Maintainability**: Identify areas that could be refactored for easier maintenance and extension\n6. **Performance**: Suggest optimizations that could improve runtime performance without changing functionality\n\nConsider the game's architecture (Ursina engine, modular design, entity-component system) and provide specific, actionable suggestions. Focus on improvements that maintain the existing functionality while enhancing code quality."
  }
}